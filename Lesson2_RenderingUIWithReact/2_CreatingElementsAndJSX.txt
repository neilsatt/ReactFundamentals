
React.createElement(type, props, content)

const element = React.createElement('div', {
  className: 'welcome-message'}, 
  'hello world');


// Not rendered to the page until this happens:
ReactDOM.render(element, 
    document.getElementById('root)
)


// Explanation of createElement parameters
type - This can be a string of any existing HTML element (e.g. 'p', 'span', or 'header') or you could pass a React component.


props – either null or an object. This is an object of HTML attributes and custom data 
about the element.

content – null, a string, a React Element, or a React Component. Anything that you pass here will be the content of the rendered element. 
This can include plain text, JavaScript code, other React elements.


createElement Returns ONE root element 

You can nest elements:

const element = React.createElement('ol', null,
    React.createElement('li', null, 'Bill'),
    React.createElement('li', null, 'Bob'),
    React.createElement('li', null, 'Sandy')  
)

but it's better to use an array instead:

const people = [
    {name: 'Bill'},
    {name: 'Bob'},
    {name: 'Sandy'}
]

const element = React.createElement('ol', null,
    people.map((person, index) => (
      // need to have a unique key for the prop
       React.createElement('li',{key: index}, person.name)   
    ))  
)


------------------------------------------------------

Updated to use JSX instead:

const element = <ol>
   {people.map(person => (
      <li key={person.name}>{person.name}</li>
    ))}
</ol>  

// use this to check code
debugger;

-----------------------------------------------------
JSX also return just one element:

Correct Version:
const message = (
  <div>
    <h1>All About JSX:</h1>
    <ul>
      <li>JSX</li>
      <li>is</li>
      <li>awesome!</li>
    </ul>
  </div>
);

Incorrect Version:
const message = (
  <h1>All About JSX:</h1>
  <ul>
    <li>JSX</li>
    <li>is</li>
    <li>awesome!</li>
  </ul>
);


COMPONENTS ---------------------------------------------------------------------
Used to create our own custom elements.

class ContactList extends React.Component {
    render() {   // the only required method, it returns the JSX or elements 
      const people = [
        {name: 'Bill'},
        {name: 'Bob'},
        {name: 'Sandy'}
      ]
      
      return <ol>
        {people.map(person =>(
             <li key={person.name}>{person.name}</li>
        ))}
      </ol>   
    }
}

// Now we render a ContactList element
// Grouping everything together, we can render and treat like a single element 
ReactDOM.render(
    <ContactList/>,
    document.getElementById('root')
)


Creating Elements Recap ------------------------------------------------------
React - View Layer
createElement renders HTML, often using JSX

JSX gets compiled to calls to React's createElement method that outputs HTML
that gets rendered in the browser. 

Component classes are factories that produce instances of components. 

Component classes should follow the single responsibility principle and
do 'just one thing'. 















